/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IArraysToGoInterface extends utils.Interface {
  contractName: "IArraysToGo";
  functions: {
    "fillArrayByName(string,uint256[])": FunctionFragment;
    "fillArrayByNameProgressively(string,uint256)": FunctionFragment;
    "getArrayByName(string)": FunctionFragment;
    "getArrayInfo(string)": FunctionFragment;
    "initialize(string,uint256)": FunctionFragment;
    "safeGetArrayByName(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "fillArrayByName",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fillArrayByNameProgressively",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArrayByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getArrayInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeGetArrayByName",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "fillArrayByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillArrayByNameProgressively",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArrayByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArrayInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeGetArrayByName",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IArraysToGo extends BaseContract {
  contractName: "IArraysToGo";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IArraysToGoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fillArrayByName(
      arrayName: string,
      data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillArrayByNameProgressively(
      arrayName: string,
      numberOfElements: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getArrayByName(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getArrayInfo(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, boolean, string, BigNumber]>;

    initialize(
      arrayName: string,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeGetArrayByName(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  fillArrayByName(
    arrayName: string,
    data: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillArrayByNameProgressively(
    arrayName: string,
    numberOfElements: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getArrayByName(
    arrayName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getArrayInfo(
    arrayName: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber, boolean, string, BigNumber]>;

  initialize(
    arrayName: string,
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeGetArrayByName(
    arrayName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    fillArrayByName(
      arrayName: string,
      data: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    fillArrayByNameProgressively(
      arrayName: string,
      numberOfElements: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getArrayByName(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getArrayInfo(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, boolean, string, BigNumber]>;

    initialize(
      arrayName: string,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeGetArrayByName(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    fillArrayByName(
      arrayName: string,
      data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillArrayByNameProgressively(
      arrayName: string,
      numberOfElements: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getArrayByName(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArrayInfo(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      arrayName: string,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeGetArrayByName(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fillArrayByName(
      arrayName: string,
      data: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillArrayByNameProgressively(
      arrayName: string,
      numberOfElements: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getArrayByName(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArrayInfo(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      arrayName: string,
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeGetArrayByName(
      arrayName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

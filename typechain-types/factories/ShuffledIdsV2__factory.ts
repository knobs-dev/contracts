/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ShuffledIdsV2, ShuffledIdsV2Interface } from "../ShuffledIdsV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxIds",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060405160e338038060e38339818101604052810190602d9190606f565b80600181905550506097565b600080fd5b6000819050919050565b604f81603e565b8114605957600080fd5b50565b6000815190506069816048565b92915050565b60006020828403121560825760816039565b5b6000608e84828501605c565b91505092915050565b603f8060a46000396000f3fe6080604052600080fdfea26469706673582212209877c25c8fa83d3512bd52650fdbe96cd651b2bbe567fcd2fb328618f7b6669164736f6c634300080c0033";

type ShuffledIdsV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShuffledIdsV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShuffledIdsV2__factory extends ContractFactory {
  constructor(...args: ShuffledIdsV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ShuffledIdsV2";
  }

  deploy(
    maxIds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ShuffledIdsV2> {
    return super.deploy(maxIds, overrides || {}) as Promise<ShuffledIdsV2>;
  }
  getDeployTransaction(
    maxIds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(maxIds, overrides || {});
  }
  attach(address: string): ShuffledIdsV2 {
    return super.attach(address) as ShuffledIdsV2;
  }
  connect(signer: Signer): ShuffledIdsV2__factory {
    return super.connect(signer) as ShuffledIdsV2__factory;
  }
  static readonly contractName: "ShuffledIdsV2";
  public readonly contractName: "ShuffledIdsV2";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShuffledIdsV2Interface {
    return new utils.Interface(_abi) as ShuffledIdsV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShuffledIdsV2 {
    return new Contract(address, _abi, signerOrProvider) as ShuffledIdsV2;
  }
}

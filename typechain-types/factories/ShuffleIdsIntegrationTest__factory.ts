/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ShuffleIdsIntegrationTest,
  ShuffleIdsIntegrationTestInterface,
} from "../ShuffleIdsIntegrationTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "arrayToGoAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "arrayName",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000eb438038062000eb4833981810160405281019062000037919062000427565b81816200006d7fb5225f61bc9e70dab76205355547a321e052966ca49f8fb81f6413339d49ee0560001b620001ae60201b60201c565b620000a17f6490bc743a80c422ceff405aec1b1d165c3abcc6824a964dd58f9c32eeca4cd260001b620001ae60201b60201c565b620000d57f874223f45cdefeada1779174f3f825f972e2f9c127d7bdcc3db03e619bcfa2e860001b620001ae60201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1662693599826040518263ffffffff1660e01b81526004016200010f9190620004ea565b600060405180830381865afa1580156200012d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000158919062000624565b600090805190602001906200016f929190620001b4565b505050620001a67fb452b7d85b18a22e39f0d9235f12417bed69bd6484cc74122a66edde4f60ad2e60001b620001b160201b60201c565b505062000675565b50565b50565b828054828255906000526020600020908101928215620001f3579160200282015b82811115620001f2578251825591602001919060010190620001d5565b5b50905062000202919062000206565b5090565b5b808211156200022157600081600090555060010162000207565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002668262000239565b9050919050565b620002788162000259565b81146200028457600080fd5b50565b60008151905062000298816200026d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002f382620002a8565b810181811067ffffffffffffffff82111715620003155762000314620002b9565b5b80604052505050565b60006200032a62000225565b9050620003388282620002e8565b919050565b600067ffffffffffffffff8211156200035b576200035a620002b9565b5b6200036682620002a8565b9050602081019050919050565b60005b838110156200039357808201518184015260208101905062000376565b83811115620003a3576000848401525b50505050565b6000620003c0620003ba846200033d565b6200031e565b905082815260208101848484011115620003df57620003de620002a3565b5b620003ec84828562000373565b509392505050565b600082601f8301126200040c576200040b6200029e565b5b81516200041e848260208601620003a9565b91505092915050565b600080604083850312156200044157620004406200022f565b5b6000620004518582860162000287565b925050602083015167ffffffffffffffff81111562000475576200047462000234565b5b6200048385828601620003f4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000620004b6826200048d565b620004c2818562000498565b9350620004d481856020860162000373565b620004df81620002a8565b840191505092915050565b60006020820190508181036000830152620005068184620004a9565b905092915050565b600067ffffffffffffffff8211156200052c576200052b620002b9565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b620005578162000542565b81146200056357600080fd5b50565b60008151905062000577816200054c565b92915050565b6000620005946200058e846200050e565b6200031e565b90508083825260208201905060208402830185811115620005ba57620005b96200053d565b5b835b81811015620005e75780620005d2888262000566565b845260208401935050602081019050620005bc565b5050509392505050565b600082601f8301126200060957620006086200029e565b5b81516200061b8482602086016200057d565b91505092915050565b6000602082840312156200063d576200063c6200022f565b5b600082015167ffffffffffffffff8111156200065e576200065d62000234565b5b6200066c84828501620005f1565b91505092915050565b61082f80620006856000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631249c58b1461003b578063af640d0f14610045575b600080fd5b610043610063565b005b61004d6100f7565b60405161005a919061051f565b60405180910390f35b61008f7fbc39f017902f29df1528e3c009f5b335b24acd29fa5482d9a6804c4099b6cae660001b6100fd565b6100bb7f7989093662ad2d64516e8829e921b99b22eed0a64291b873a4782baaa408f3c460001b6100fd565b6100e77f430befc62cba93749533abe052bab35037b51c2b0b4e8f90b1ac876f9d2fa08160001b6100fd565b6100ef610100565b600281905550565b60025481565b50565b600061012e7f2007f113b9d77cd69da905021d4474e4e6af35768e237843087873df4faa9a5f60001b610503565b61015a7fd63b267076a710f45005da400349d80317085d39fc834718ecf0689d352c363860001b610503565b6101867f57ca1638d8ee5fd50fb89485aded9a188b785503b6b4b8c3f1346e74dccba32860001b610503565b6101b27f88fe377355d678da6e5d68be7a5991f110c5f47171e9fc64d8c90b41393c610660001b610503565b60008080549050116101f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f090610597565b60405180910390fd5b6102257f6564533ac636269045ea159e0dbcb948c43e128abd1ba05810b7d6270a02bc6360001b610503565b6102517f255328617a600af9a5ba75fe2756950c210e91d0dea9323f65a2dcd76cb8e72660001b610503565b61027d7f8b0e508ca5512ae9c80a11aae43418b3f86935e938aee394271d61095d0d1a3760001b610503565b6102a97f2fa2b3719499c4ca972b126777bf12bfc6e9b2fe43d1174169e3caf6c678082d60001b610503565b6102d57fc6f36da91df9b47c1b6e08b6914ea689c4aec2d99871ff18f0480f497d9ed2df60001b610503565b6000808054905042336001546040516020016102f393929190610652565b6040516020818303038152906040528051906020012060001c61031691906106be565b90506103447f7301d66cff0464bbe12aead6a3802a06b6099dd496320d5549aebc91d666332760001b610503565b6103707fa146ba23e5c49de95e01855980a201ef08223050e598e25f552953148b7c2ba260001b610503565b60008181548110610384576103836106ef565b5b906000526020600020015491506103bd7f0567f9a71b5349f2a7d081499208470ae6207785685b17bf3ca469fa40c5a81b60001b610503565b6103e97f922992bcade1d1f62fb593a479041f197eb75632994da362db3c6824de0fc89060001b610503565b600060016000805490506103fd919061074d565b8154811061040e5761040d6106ef565b5b90600052602060002001546000828154811061042d5761042c6106ef565b5b90600052602060002001819055506104677f0140120adb8b14119a296ce222feaa865d8c3994ce5934c3ea9ff7ea32b361ff60001b610503565b6104937f1c8f6077716b59a1720bbf9135ffc905914067b11ced48436101964fb333471760001b610503565b60008054806104a5576104a4610781565b5b600190038181906000526020600020016000905590556104e77ff400cdbdfff1636e89fe93f0fe49be8dc3d8ae0958542a7c321a150d5094e43c60001b610503565b600160008154809291906104fa906107b0565b91905055505090565b50565b6000819050919050565b61051981610506565b82525050565b60006020820190506105346000830184610510565b92915050565b600082825260208201905092915050565b7f4e6f206d6f726520696473206c65667400000000000000000000000000000000600082015250565b600061058160108361053a565b915061058c8261054b565b602082019050919050565b600060208201905081810360008301526105b081610574565b9050919050565b6000819050919050565b6105d26105cd82610506565b6105b7565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610603826105d8565b9050919050565b60008160601b9050919050565b60006106228261060a565b9050919050565b600061063482610617565b9050919050565b61064c610647826105f8565b610629565b82525050565b600061065e82866105c1565b60208201915061066e828561063b565b60148201915061067e82846105c1565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006106c982610506565b91506106d483610506565b9250826106e4576106e361068f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061075882610506565b915061076383610506565b9250828210156107765761077561071e565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006107bb82610506565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156107ee576107ed61071e565b5b60018201905091905056fea2646970667358221220cbba90d67639e2079089690fdf78a63e9e6c21fa33b5269e0ed5e5ef8779da2864736f6c634300080c0033";

type ShuffleIdsIntegrationTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShuffleIdsIntegrationTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShuffleIdsIntegrationTest__factory extends ContractFactory {
  constructor(...args: ShuffleIdsIntegrationTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ShuffleIdsIntegrationTest";
  }

  deploy(
    arrayToGoAddress: string,
    arrayName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ShuffleIdsIntegrationTest> {
    return super.deploy(
      arrayToGoAddress,
      arrayName,
      overrides || {}
    ) as Promise<ShuffleIdsIntegrationTest>;
  }
  getDeployTransaction(
    arrayToGoAddress: string,
    arrayName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      arrayToGoAddress,
      arrayName,
      overrides || {}
    );
  }
  attach(address: string): ShuffleIdsIntegrationTest {
    return super.attach(address) as ShuffleIdsIntegrationTest;
  }
  connect(signer: Signer): ShuffleIdsIntegrationTest__factory {
    return super.connect(signer) as ShuffleIdsIntegrationTest__factory;
  }
  static readonly contractName: "ShuffleIdsIntegrationTest";
  public readonly contractName: "ShuffleIdsIntegrationTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShuffleIdsIntegrationTestInterface {
    return new utils.Interface(_abi) as ShuffleIdsIntegrationTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShuffleIdsIntegrationTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ShuffleIdsIntegrationTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ShuffleIdsIntegrationTest,
  ShuffleIdsIntegrationTestInterface,
} from "../ShuffleIdsIntegrationTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "arrayToGoAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "arrayName",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000eb438038062000eb4833981810160405281019062000037919062000427565b81816200006d7fd7830bf544fd26506a9968ebed5a1a618b27d0d419136b8ef5732e0cade99fc760001b620001ae60201b60201c565b620000a17f17c749f380b7c4e4729c3ed487b4e330258861f65abbae3938062d9483577a6160001b620001ae60201b60201c565b620000d57fb56e243ebf36d6178ec0e9238c3f1bb01be2ecdd59dbd2658f75f8d9b964fbcd60001b620001ae60201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1662693599826040518263ffffffff1660e01b81526004016200010f9190620004ea565b600060405180830381865afa1580156200012d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000158919062000624565b600090805190602001906200016f929190620001b4565b505050620001a67fce265ed9204a22b62bfa6fe3487a76ba62ec93a34a012051abfdd4a3c9b083ea60001b620001b160201b60201c565b505062000675565b50565b50565b828054828255906000526020600020908101928215620001f3579160200282015b82811115620001f2578251825591602001919060010190620001d5565b5b50905062000202919062000206565b5090565b5b808211156200022157600081600090555060010162000207565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002668262000239565b9050919050565b620002788162000259565b81146200028457600080fd5b50565b60008151905062000298816200026d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002f382620002a8565b810181811067ffffffffffffffff82111715620003155762000314620002b9565b5b80604052505050565b60006200032a62000225565b9050620003388282620002e8565b919050565b600067ffffffffffffffff8211156200035b576200035a620002b9565b5b6200036682620002a8565b9050602081019050919050565b60005b838110156200039357808201518184015260208101905062000376565b83811115620003a3576000848401525b50505050565b6000620003c0620003ba846200033d565b6200031e565b905082815260208101848484011115620003df57620003de620002a3565b5b620003ec84828562000373565b509392505050565b600082601f8301126200040c576200040b6200029e565b5b81516200041e848260208601620003a9565b91505092915050565b600080604083850312156200044157620004406200022f565b5b6000620004518582860162000287565b925050602083015167ffffffffffffffff81111562000475576200047462000234565b5b6200048385828601620003f4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000620004b6826200048d565b620004c2818562000498565b9350620004d481856020860162000373565b620004df81620002a8565b840191505092915050565b60006020820190508181036000830152620005068184620004a9565b905092915050565b600067ffffffffffffffff8211156200052c576200052b620002b9565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b620005578162000542565b81146200056357600080fd5b50565b60008151905062000577816200054c565b92915050565b6000620005946200058e846200050e565b6200031e565b90508083825260208201905060208402830185811115620005ba57620005b96200053d565b5b835b81811015620005e75780620005d2888262000566565b845260208401935050602081019050620005bc565b5050509392505050565b600082601f8301126200060957620006086200029e565b5b81516200061b8482602086016200057d565b91505092915050565b6000602082840312156200063d576200063c6200022f565b5b600082015167ffffffffffffffff8111156200065e576200065d62000234565b5b6200066c84828501620005f1565b91505092915050565b61082f80620006856000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631249c58b1461003b578063af640d0f14610045575b600080fd5b610043610063565b005b61004d6100f7565b60405161005a919061051f565b60405180910390f35b61008f7fee124757fe06594548c1d62490ba1924abcde44b8a473bdde4358f867e81275f60001b6100fd565b6100bb7fab1c6e93a70eaa62b6a9c956694aadc0ebc18687f4ede4ad4608b5ef3d77f3b460001b6100fd565b6100e77f6c4ae4586d989367d188df9d7887bf892413ac6153e9cf83010482122d89e81360001b6100fd565b6100ef610100565b600281905550565b60025481565b50565b600061012e7f976ba8c35b9bdb6d400feb0f6daec740fae042ce5c7d58f9b6fb17d899c09bf060001b610503565b61015a7fca0a8d0e869dc4e8cc335ea92b12c1fcc0a30d908644096b9e02095103762dfc60001b610503565b6101867fea4051385f2e8959df445bc2dfc98bde8e7768acd3d3c672eed51f406fc13b4160001b610503565b6101b27fe00f6aceee2b452bab708bde0f94767aa4c83d23bb1bde0abaa3ab942dda146260001b610503565b60008080549050116101f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f090610597565b60405180910390fd5b6102257f140591f2e2d42f04f9a9aff2e6bcc30d00ae03d97c039bb54282ac6bebf3378d60001b610503565b6102517f63b71dcfd9938170f3a12d001bd927d57128c9383508de04dedb5b7f441eccf860001b610503565b61027d7f30bf49442b13e69dfc13306cc4071c2990d210a55555ec5465d957a8e4ebcfed60001b610503565b6102a97f16302a02170ed041ef15039f0682a1cd5fb87407ca3a9e4979657be0d6c0f05a60001b610503565b6102d57f440e3507d71ea14074139bd4192ca129a8ed10edabf0364736dcc268e5a1177f60001b610503565b6000808054905042336001546040516020016102f393929190610652565b6040516020818303038152906040528051906020012060001c61031691906106be565b90506103447f74805c1052eded9d3f2e13ff7951f50938bd6c3a4ca3fccd595012d2d40f948960001b610503565b6103707f311a8560b1955ce98d1454b5eeaefe565578b4ae832ca87301b86872ceaa996460001b610503565b60008181548110610384576103836106ef565b5b906000526020600020015491506103bd7fd246e0d926f5e02f465dec349486c440716347e298e5c8d82c7f908a808b8de760001b610503565b6103e97ff0d2491ce0db52a2a7a93fcb8a1bb9bc283fe0489bf9be24318a3bd5857927e460001b610503565b600060016000805490506103fd919061074d565b8154811061040e5761040d6106ef565b5b90600052602060002001546000828154811061042d5761042c6106ef565b5b90600052602060002001819055506104677f5adc0dc51c98e8e7dad21315ebc176fc25c82e76d34c791402827093f06eb70560001b610503565b6104937fe0bf551377fd684ca08c3602e8613668bdfaf5bc397790e45f66ee196a1dd29760001b610503565b60008054806104a5576104a4610781565b5b600190038181906000526020600020016000905590556104e77ff492b52e9c5f93db341c0d8fde86a5e94ed6b02e16a4a46eafa2ad2d430e3c0f60001b610503565b600160008154809291906104fa906107b0565b91905055505090565b50565b6000819050919050565b61051981610506565b82525050565b60006020820190506105346000830184610510565b92915050565b600082825260208201905092915050565b7f4e6f206d6f726520696473206c65667400000000000000000000000000000000600082015250565b600061058160108361053a565b915061058c8261054b565b602082019050919050565b600060208201905081810360008301526105b081610574565b9050919050565b6000819050919050565b6105d26105cd82610506565b6105b7565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610603826105d8565b9050919050565b60008160601b9050919050565b60006106228261060a565b9050919050565b600061063482610617565b9050919050565b61064c610647826105f8565b610629565b82525050565b600061065e82866105c1565b60208201915061066e828561063b565b60148201915061067e82846105c1565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006106c982610506565b91506106d483610506565b9250826106e4576106e361068f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061075882610506565b915061076383610506565b9250828210156107765761077561071e565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006107bb82610506565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156107ee576107ed61071e565b5b60018201905091905056fea2646970667358221220c7e5037409437181ae132f2b76a52e42d7284c83bb25ab2f3358c21687ffe39d64736f6c634300080c0033";

type ShuffleIdsIntegrationTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShuffleIdsIntegrationTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShuffleIdsIntegrationTest__factory extends ContractFactory {
  constructor(...args: ShuffleIdsIntegrationTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ShuffleIdsIntegrationTest";
  }

  deploy(
    arrayToGoAddress: string,
    arrayName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ShuffleIdsIntegrationTest> {
    return super.deploy(
      arrayToGoAddress,
      arrayName,
      overrides || {}
    ) as Promise<ShuffleIdsIntegrationTest>;
  }
  getDeployTransaction(
    arrayToGoAddress: string,
    arrayName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      arrayToGoAddress,
      arrayName,
      overrides || {}
    );
  }
  attach(address: string): ShuffleIdsIntegrationTest {
    return super.attach(address) as ShuffleIdsIntegrationTest;
  }
  connect(signer: Signer): ShuffleIdsIntegrationTest__factory {
    return super.connect(signer) as ShuffleIdsIntegrationTest__factory;
  }
  static readonly contractName: "ShuffleIdsIntegrationTest";
  public readonly contractName: "ShuffleIdsIntegrationTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShuffleIdsIntegrationTestInterface {
    return new utils.Interface(_abi) as ShuffleIdsIntegrationTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShuffleIdsIntegrationTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ShuffleIdsIntegrationTest;
  }
}

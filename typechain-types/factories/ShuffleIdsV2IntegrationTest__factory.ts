/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ShuffleIdsV2IntegrationTest,
  ShuffleIdsV2IntegrationTestInterface,
} from "../ShuffleIdsV2IntegrationTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106de3803806106de8339818101604052810190610032919061007c565b808060018190555050506100a9565b600080fd5b6000819050919050565b61005981610046565b811461006457600080fd5b50565b60008151905061007681610050565b92915050565b60006020828403121561009257610091610041565b5b60006100a084828501610067565b91505092915050565b610626806100b86000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631249c58b1461003b578063af640d0f14610045575b600080fd5b610043610063565b005b61004d610073565b60405161005a9190610276565b60405180910390f35b61006b610079565b600381905550565b60035481565b600080600154116100bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100b6906102ee565b60405180910390fd5b600060015442336001436100d3919061033d565b406002546040516020016100ea9493929190610437565b6040516020818303038152906040528051906020012060001c61010d91906104b4565b905060026000815480929190610122906104e5565b919050555061013081610136565b91505090565b60008060008084815260200190815260200160002054905060008114156101755761016083610194565b60018361016d919061052e565b91505061018f565b61017e83610194565b60018161018b919061052e565b9150505b919050565b61019c610206565b600080600060015481526020019081526020016000205414156101d75760015460008083815260200190815260200160002081905550610203565b600080600154815260200190815260200160002054600080838152602001908152602001600020819055505b50565b6000600154905060008111610250576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610247906105d0565b60405180910390fd5b6001810360018190555050565b6000819050919050565b6102708161025d565b82525050565b600060208201905061028b6000830184610267565b92915050565b600082825260208201905092915050565b7f4e6f206d6f726520696473206c65667400000000000000000000000000000000600082015250565b60006102d8601083610291565b91506102e3826102a2565b602082019050919050565b60006020820190508181036000830152610307816102cb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103488261025d565b91506103538361025d565b9250828210156103665761036561030e565b5b828203905092915050565b6000819050919050565b61038c6103878261025d565b610371565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103bd82610392565b9050919050565b60008160601b9050919050565b60006103dc826103c4565b9050919050565b60006103ee826103d1565b9050919050565b610406610401826103b2565b6103e3565b82525050565b6000819050919050565b6000819050919050565b61043161042c8261040c565b610416565b82525050565b6000610443828761037b565b60208201915061045382866103f5565b6014820191506104638285610420565b602082019150610473828461037b565b60208201915081905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006104bf8261025d565b91506104ca8361025d565b9250826104da576104d9610485565b5b828206905092915050565b60006104f08261025d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156105235761052261030e565b5b600182019050919050565b60006105398261025d565b91506105448361025d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156105795761057861030e565b5b828201905092915050565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b60006105ba601b83610291565b91506105c582610584565b602082019050919050565b600060208201905081810360008301526105e9816105ad565b905091905056fea2646970667358221220e666f8b538be9ced27067a2ca8ed67b296b10ed0c2dd4a2afddedb4288b3fb4664736f6c634300080c0033";

type ShuffleIdsV2IntegrationTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ShuffleIdsV2IntegrationTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ShuffleIdsV2IntegrationTest__factory extends ContractFactory {
  constructor(...args: ShuffleIdsV2IntegrationTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "ShuffleIdsV2IntegrationTest";
  }

  deploy(
    maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ShuffleIdsV2IntegrationTest> {
    return super.deploy(
      maxSupply,
      overrides || {}
    ) as Promise<ShuffleIdsV2IntegrationTest>;
  }
  getDeployTransaction(
    maxSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(maxSupply, overrides || {});
  }
  attach(address: string): ShuffleIdsV2IntegrationTest {
    return super.attach(address) as ShuffleIdsV2IntegrationTest;
  }
  connect(signer: Signer): ShuffleIdsV2IntegrationTest__factory {
    return super.connect(signer) as ShuffleIdsV2IntegrationTest__factory;
  }
  static readonly contractName: "ShuffleIdsV2IntegrationTest";
  public readonly contractName: "ShuffleIdsV2IntegrationTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ShuffleIdsV2IntegrationTestInterface {
    return new utils.Interface(_abi) as ShuffleIdsV2IntegrationTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShuffleIdsV2IntegrationTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ShuffleIdsV2IntegrationTest;
  }
}

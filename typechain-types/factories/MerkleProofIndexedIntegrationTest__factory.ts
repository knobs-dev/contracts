/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleProofIndexedIntegrationTest,
  MerkleProofIndexedIntegrationTestInterface,
} from "../MerkleProofIndexedIntegrationTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    name: "VerificationResult",
    type: "event",
  },
  {
    inputs: [],
    name: "verified",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "leafIndex",
        type: "uint256",
      },
    ],
    name: "verifyProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109ff806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634fc36be61461003b578063bbb82d8914610057575b600080fd5b610055600480360381019061005091906107bc565b610075565b005b61005f6101bf565b60405161006c919061085a565b60405180910390f35b6100a17fabc5eec0886cedece5bf916e3317018bc0ef6e41a0f724958e2ec35fd7866d9d60001b6101d0565b6100cd7f332a552080e1d431ee3413312e234e874fd09af985c15f812783831303fb65be60001b6101d0565b6100f97fd83de1e17fab6a15b716a710f8c6e1f209f4877849fcb7c6b1b1a5913a668aa260001b6101d0565b610105848484846101d3565b6000806101000a81548160ff0219169083151502179055506101497f26306b749c5a3e371c5f48ed9c73d5bafc4668df53172d54e36e99fd8d1815db60001b6101d0565b6101757ff27d0fed79da4ccc32a6b5eb934dcf9bc2b2b5d9bf635ed8736d7d80cb7311c860001b6101d0565b7fc245dfbdf37b342c5a621e8d770f240c63597d37154b774cedbe8f30e72816b560008054906101000a900460ff166040516101b1919061085a565b60405180910390a150505050565b60008054906101000a900460ff1681565b50565b60006102017f81d2fb6b9748f5a153032de34972403adcd1b9e853977948cd5eccc0ee7040a960001b6105e0565b61022d7f6c099589c873e9ba6f9092dc114a67079f6f28fdc739708feb356a799938607b60001b6105e0565b6102597feb4bf83e5f782a84504937e41d115e1856e01ef15ca26a5c33dbd223b9ac963460001b6105e0565b600083905061028a7fc25c217571a1e18cf33bd3ad04d509231c4a0a6cf97ac99e7be8dfabca8b371160001b6105e0565b6102b67fba59e416099a102c0af59c3fac2e4a8c4ce36cc963f7d91cac90f3f5a1f9839e60001b6105e0565b60006102e47f898731df5be0ee4015f12db251dd1431ad62916dea12ebc7ec93c96e6ff68f0360001b6105e0565b6103107fa97bd2cbbe8c6a53fe3f58aba1e4ab5b895d0ea2cfbf6a827f24d3e7dd846bde60001b6105e0565b60005b8751811015610578576103487f78e335a96e2d69285633e788991647186fcb5b65194048a5f84f81ed4f72c16260001b6105e0565b6103747f92789f8b68b9ea743f0556c54b9de504ca1c7f882886ffcbf388b5e0ec09783060001b6105e0565b87818151811061038757610386610875565b5b602002602001015191506103bd7f20d713a2312510b42cc618132a062fcbbb3d6a22f17ee43d5f541f0f6758275e60001b6105e0565b6103e97f55cdb0b8298fb2b421ec095983fee98fb8b659c6ae322e9160963bbdfe45391b60001b6105e0565b600060028287901c6103fb91906108d3565b14156104b55761042d7fc915ca30eb19f3112348bfe9ee7afa85c21863b2bf35db6568a715c042cf34af60001b6105e0565b6104597f5b9eba86b35b2b38d0b26a3eee92af47031627acd01a39966fa84e182975322360001b6105e0565b6104857fe8cf69cdd51ebae948aac6d6166f52c7900bf599b5eb647c128be70268b9603b60001b6105e0565b8282604051602001610498929190610925565b604051602081830303815290604052805190602001209250610565565b6104e17f7dc76fc145c986a6d2a3cc774de9f9fe06425619cdabf67601a0fea3017ced5f60001b6105e0565b61050d7f46558908e769c69b6b5b533faa2ccfe89c0130a38d60d28bea27bc3b34fad3a360001b6105e0565b6105397f9589a74a92a7b8e7548dd418bab4f8f0ff831d49e6ca01b8f7d0502612c4960960001b6105e0565b818360405160200161054c929190610925565b6040516020818303038152906040528051906020012092505b808061057090610980565b915050610313565b506105a57f941048e711346c2490d96b793e07cc23b3334172e1682d7824dcf0986a54f63960001b6105e0565b6105d17f6c0534c7b6176ca1bdc387ed1c01c513fce7459029e9d7759ea64e46b68fa24060001b6105e0565b85821492505050949350505050565b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610645826105fc565b810181811067ffffffffffffffff821117156106645761066361060d565b5b80604052505050565b60006106776105e3565b9050610683828261063c565b919050565b600067ffffffffffffffff8211156106a3576106a261060d565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6106cc816106b9565b81146106d757600080fd5b50565b6000813590506106e9816106c3565b92915050565b60006107026106fd84610688565b61066d565b90508083825260208201905060208402830185811115610725576107246106b4565b5b835b8181101561074e578061073a88826106da565b845260208401935050602081019050610727565b5050509392505050565b600082601f83011261076d5761076c6105f7565b5b813561077d8482602086016106ef565b91505092915050565b6000819050919050565b61079981610786565b81146107a457600080fd5b50565b6000813590506107b681610790565b92915050565b600080600080608085870312156107d6576107d56105ed565b5b600085013567ffffffffffffffff8111156107f4576107f36105f2565b5b61080087828801610758565b9450506020610811878288016106da565b9350506040610822878288016106da565b9250506060610833878288016107a7565b91505092959194509250565b60008115159050919050565b6108548161083f565b82525050565b600060208201905061086f600083018461084b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006108de82610786565b91506108e983610786565b9250826108f9576108f86108a4565b5b828206905092915050565b6000819050919050565b61091f61091a826106b9565b610904565b82525050565b6000610931828561090e565b602082019150610941828461090e565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061098b82610786565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156109be576109bd610951565b5b60018201905091905056fea26469706673582212204a54b723182ace2dcb01524a4b714afa70a49c989d87a280af697bb30323d50764736f6c634300080c0033";

type MerkleProofIndexedIntegrationTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleProofIndexedIntegrationTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleProofIndexedIntegrationTest__factory extends ContractFactory {
  constructor(...args: MerkleProofIndexedIntegrationTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "MerkleProofIndexedIntegrationTest";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleProofIndexedIntegrationTest> {
    return super.deploy(
      overrides || {}
    ) as Promise<MerkleProofIndexedIntegrationTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleProofIndexedIntegrationTest {
    return super.attach(address) as MerkleProofIndexedIntegrationTest;
  }
  connect(signer: Signer): MerkleProofIndexedIntegrationTest__factory {
    return super.connect(signer) as MerkleProofIndexedIntegrationTest__factory;
  }
  static readonly contractName: "MerkleProofIndexedIntegrationTest";
  public readonly contractName: "MerkleProofIndexedIntegrationTest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleProofIndexedIntegrationTestInterface {
    return new utils.Interface(
      _abi
    ) as MerkleProofIndexedIntegrationTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleProofIndexedIntegrationTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MerkleProofIndexedIntegrationTest;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MerkleProofIndexedIntegrationTestInterface
  extends utils.Interface {
  contractName: "MerkleProofIndexedIntegrationTest";
  functions: {
    "verified()": FunctionFragment;
    "verifyProof(bytes32[],bytes32,bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "verified", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BytesLike[], BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "verified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {
    "VerificationResult(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VerificationResult"): EventFragment;
}

export type VerificationResultEvent = TypedEvent<
  [boolean],
  { result: boolean }
>;

export type VerificationResultEventFilter =
  TypedEventFilter<VerificationResultEvent>;

export interface MerkleProofIndexedIntegrationTest extends BaseContract {
  contractName: "MerkleProofIndexedIntegrationTest";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MerkleProofIndexedIntegrationTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    verified(overrides?: CallOverrides): Promise<[boolean]>;

    verifyProof(
      proof: BytesLike[],
      root: BytesLike,
      leaf: BytesLike,
      leafIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  verified(overrides?: CallOverrides): Promise<boolean>;

  verifyProof(
    proof: BytesLike[],
    root: BytesLike,
    leaf: BytesLike,
    leafIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    verified(overrides?: CallOverrides): Promise<boolean>;

    verifyProof(
      proof: BytesLike[],
      root: BytesLike,
      leaf: BytesLike,
      leafIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "VerificationResult(bool)"(result?: null): VerificationResultEventFilter;
    VerificationResult(result?: null): VerificationResultEventFilter;
  };

  estimateGas: {
    verified(overrides?: CallOverrides): Promise<BigNumber>;

    verifyProof(
      proof: BytesLike[],
      root: BytesLike,
      leaf: BytesLike,
      leafIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    verified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyProof(
      proof: BytesLike[],
      root: BytesLike,
      leaf: BytesLike,
      leafIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

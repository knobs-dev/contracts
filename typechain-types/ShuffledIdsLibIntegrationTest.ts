/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ShuffledIdsLibIntegrationTestInterface
  extends utils.Interface {
  contractName: "ShuffledIdsLibIntegrationTest";
  functions: {
    "id()": FunctionFragment;
    "mint1()": FunctionFragment;
    "mint2()": FunctionFragment;
    "shuffler1()": FunctionFragment;
    "shuffler2()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint1", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint2", values?: undefined): string;
  encodeFunctionData(functionFragment: "shuffler1", values?: undefined): string;
  encodeFunctionData(functionFragment: "shuffler2", values?: undefined): string;

  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shuffler1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shuffler2", data: BytesLike): Result;

  events: {};
}

export interface ShuffledIdsLibIntegrationTest extends BaseContract {
  contractName: "ShuffledIdsLibIntegrationTest";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShuffledIdsLibIntegrationTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint1(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shuffler1(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        remaining: BigNumber;
        offset: BigNumber;
        nonce: BigNumber;
        initialized: boolean;
      }
    >;

    shuffler2(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        remaining: BigNumber;
        offset: BigNumber;
        nonce: BigNumber;
        initialized: boolean;
      }
    >;
  };

  id(overrides?: CallOverrides): Promise<BigNumber>;

  mint1(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint2(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shuffler1(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      remaining: BigNumber;
      offset: BigNumber;
      nonce: BigNumber;
      initialized: boolean;
    }
  >;

  shuffler2(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      remaining: BigNumber;
      offset: BigNumber;
      nonce: BigNumber;
      initialized: boolean;
    }
  >;

  callStatic: {
    id(overrides?: CallOverrides): Promise<BigNumber>;

    mint1(overrides?: CallOverrides): Promise<void>;

    mint2(overrides?: CallOverrides): Promise<void>;

    shuffler1(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        remaining: BigNumber;
        offset: BigNumber;
        nonce: BigNumber;
        initialized: boolean;
      }
    >;

    shuffler2(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        remaining: BigNumber;
        offset: BigNumber;
        nonce: BigNumber;
        initialized: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    id(overrides?: CallOverrides): Promise<BigNumber>;

    mint1(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shuffler1(overrides?: CallOverrides): Promise<BigNumber>;

    shuffler2(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint1(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint2(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shuffler1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shuffler2(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
